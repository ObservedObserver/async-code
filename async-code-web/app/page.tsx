"use client";

import { useState, useEffect } from "react";

interface Task {
    id: string;
    status: string;
    prompt: string;
    repo_url: string;
    branch: string;
    commit_hash?: string;
    error?: string;
    created_at: number;
}

export default function Home() {
    const [prompt, setPrompt] = useState("");
    const [repoUrl, setRepoUrl] = useState("https://github.com/zackproser/portfolio");
    const [branch, setBranch] = useState("main");
    const [githubToken, setGithubToken] = useState("");
    const [currentTask, setCurrentTask] = useState<Task | null>(null);
    const [gitDiff, setGitDiff] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [showTokenInput, setShowTokenInput] = useState(false);

    const API_BASE = typeof window !== 'undefined' && window.location.hostname === 'localhost' 
        ? 'http://localhost:5000' 
        : '/api';

    // Poll task status
    useEffect(() => {
        if (currentTask && currentTask.status === "running") {
            const interval = setInterval(async () => {
                try {
                    const response = await fetch(`${API_BASE}/task-status/${currentTask.id}`);
                    const data = await response.json();
                    
                    if (data.status === 'success') {
                        setCurrentTask(data.task);
                        
                        if (data.task.status === "completed") {
                            // Fetch git diff
                            const diffResponse = await fetch(`${API_BASE}/git-diff/${currentTask.id}`);
                            const diffData = await diffResponse.json();
                            if (diffData.status === 'success') {
                                setGitDiff(diffData.git_diff);
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error polling task status:', error);
                }
            }, 2000);

            return () => clearInterval(interval);
        }
    }, [currentTask, API_BASE]);

    const handleStartTask = async () => {
        if (!prompt.trim() || !githubToken.trim()) {
            alert('Please provide both a prompt and GitHub token');
            return;
        }

        setIsLoading(true);
        try {
            const response = await fetch(`${API_BASE}/start-task`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    prompt: prompt.trim(),
                    repo_url: repoUrl,
                    branch: branch,
                    github_token: githubToken
                })
            });

            const data = await response.json();
            
            if (data.status === 'success') {
                setCurrentTask({
                    id: data.task_id,
                    status: "pending",
                    prompt: prompt.trim(),
                    repo_url: repoUrl,
                    branch: branch,
                    created_at: Date.now()
                });
                setGitDiff("");
            } else {
                alert(`Error: ${data.error}`);
            }
        } catch (error) {
            alert(`Error starting task: ${error}`);
        } finally {
            setIsLoading(false);
        }
    };

    const handleCreatePR = async () => {
        if (!currentTask || currentTask.status !== "completed") return;

        try {
            const response = await fetch(`${API_BASE}/create-pr/${currentTask.id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: `Claude Code: ${currentTask.prompt.substring(0, 50)}...`,
                    body: `Automated changes generated by Claude Code.\n\nPrompt: ${currentTask.prompt}`
                })
            });

            const data = await response.json();
            
            if (data.status === 'success') {
                alert(`Pull request created successfully! #${data.pr_number}`);
                window.open(data.pr_url, '_blank');
            } else {
                alert(`Error creating PR: ${data.error}`);
            }
        } catch (error) {
            alert(`Error creating PR: ${error}`);
        }
    };

    const getStatusColor = (status: string) => {
        switch (status) {
            case "pending": return "bg-yellow-100 text-yellow-700";
            case "running": return "bg-blue-100 text-blue-700";
            case "completed": return "bg-green-100 text-green-700";
            case "failed": return "bg-red-100 text-red-700";
            default: return "bg-gray-100 text-gray-700";
        }
    };

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Header */}
            <header className="bg-white border-b border-gray-200 px-6 py-4">
                <div className="flex items-center justify-between max-w-7xl mx-auto">
                    <div className="flex items-center gap-2">
                        <div className="w-8 h-8 bg-black rounded-full flex items-center justify-center">
                            <span className="text-white text-sm font-bold">C</span>
                        </div>
                        <span className="text-xl font-semibold">Claude Code Automation</span>
                    </div>
                    <div className="flex items-center gap-6">
                        <button
                            onClick={() => setShowTokenInput(!showTokenInput)}
                            className="text-gray-600 hover:text-gray-900 font-medium"
                        >
                            {showTokenInput ? 'Hide' : 'Setup'} GitHub Token
                        </button>
                    </div>
                </div>
            </header>

            {/* Main Content */}
            <main className="max-w-4xl mx-auto px-6 py-12">
                <h1 className="text-4xl font-bold text-center mb-12 text-gray-900">
                    What are we coding next?
                </h1>

                {/* GitHub Token Input */}
                {showTokenInput && (
                    <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <label className="block text-sm font-medium text-blue-900 mb-2">
                            GitHub Personal Access Token (required for MVP)
                        </label>
                        <input
                            type="password"
                            value={githubToken}
                            onChange={(e) => setGithubToken(e.target.value)}
                            placeholder="ghp_..."
                            className="w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                        <p className="text-sm text-blue-600 mt-1">
                            Need repo access permissions for cloning and creating PRs
                        </p>
                    </div>
                )}

                {/* Prompt Input */}
                <div className="mb-6">
                    <textarea
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                        placeholder="Enter your coding prompt here..."
                        className="w-full px-6 py-6 text-base border border-gray-200 rounded-2xl bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent min-h-[120px] leading-relaxed resize-none"
                    />
                </div>

                {/* Repository Controls */}
                <div className="flex items-center justify-between mb-8">
                    <div className="flex items-center gap-4">
                        <div className="flex items-center gap-2">
                            <svg className="w-4 h-4 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M4 2a2 2 0 00-2 2v11a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2H4zm0 2h12v11H4V4z" clipRule="evenodd" />
                            </svg>
                            <input
                                type="text"
                                value={repoUrl}
                                onChange={(e) => setRepoUrl(e.target.value)}
                                className="text-sm border border-gray-300 rounded px-2 py-1 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="https://github.com/owner/repo"
                            />
                        </div>
                        <div className="flex items-center gap-2">
                            <svg className="w-4 h-4 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                            <input
                                type="text"
                                value={branch}
                                onChange={(e) => setBranch(e.target.value)}
                                className="text-sm border border-gray-300 rounded px-2 py-1 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="main"
                            />
                        </div>
                    </div>
                    <div className="flex items-center gap-3">
                        <button
                            onClick={handleStartTask}
                            disabled={isLoading || (currentTask && currentTask.status === "running")}
                            className="px-4 py-2 text-sm font-medium text-white bg-black rounded-lg hover:bg-gray-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isLoading ? 'Starting...' : 'Code'}
                        </button>
                    </div>
                </div>

                {/* Current Task Status */}
                {currentTask && (
                    <div className="mb-8">
                        <div className="bg-white rounded-lg border border-gray-200 p-6">
                            <div className="flex items-start justify-between mb-4">
                                <div className="flex-1">
                                    <div className="flex items-center gap-2 mb-2">
                                        <span className={`text-sm px-2 py-1 rounded ${getStatusColor(currentTask.status)}`}>
                                            {currentTask.status}
                                        </span>
                                        <h3 className="font-semibold text-gray-900">
                                            {currentTask.prompt.substring(0, 100)}...
                                        </h3>
                                    </div>
                                    <p className="text-sm text-gray-500">
                                        {new Date(currentTask.created_at).toLocaleString()} · {currentTask.repo_url}
                                    </p>
                                    {currentTask.error && (
                                        <p className="text-sm text-red-600 mt-2">
                                            Error: {currentTask.error}
                                        </p>
                                    )}
                                </div>
                                {currentTask.status === "completed" && (
                                    <button
                                        onClick={handleCreatePR}
                                        className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors"
                                    >
                                        Create PR
                                    </button>
                                )}
                            </div>

                            {/* Git Diff Display */}
                            {gitDiff && (
                                <div className="mt-4">
                                    <h4 className="font-medium text-gray-900 mb-2">Changes Made:</h4>
                                    <pre className="bg-gray-50 border border-gray-200 rounded-lg p-4 text-sm overflow-x-auto max-h-96 overflow-y-auto">
                                        {gitDiff}
                                    </pre>
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* Instructions */}
                {!currentTask && (
                    <div className="text-center text-gray-500">
                        <p className="mb-2">Enter a prompt describing what you want to code</p>
                        <p className="text-sm">Claude Code will analyze your repository and make the necessary changes</p>
                    </div>
                )}
            </main>
        </div>
    );
}
